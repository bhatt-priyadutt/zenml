name: "Install ZenML"
description: "Install ZenML, most integrations, loads/uploads cached venv and pip download cache if applicable"
inputs:
  cache_version:
    description: 'Value gets appended to the cache key and will therefore invalidate the cache if it changes'
    required: true
  python-version:
    description: 'Python version'
    type: string
    required: true
  os:
    description: 'OS'
    type: string
    required: true
  install_integrations:
    description: 'Install ZenML integrations'
    type: string
    required: false
    default: 'yes'

runs:
  using: "composite"
  steps:

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}

    - name: Delete error-causing bash
      shell: bash
      if: ${{ inputs.os == 'windows-latest' }}
      run: rm.exe "C:/WINDOWS/system32/bash.EXE"

    - name: Set path to bash for example runner
      shell: bash
      if: ${{ inputs.os == 'windows-latest' }}
      run: |
        echo "SHELL_EXECUTABLE=C:\Program Files\Git\bin\bash.exe" >> $GITHUB_ENV

    - name: Get current week
      shell: bash
      id: date
      run: echo "::set-output name=week::$(date +'calendar-week-%W')"

    - uses: syphar/restore-virtualenv@v1
      id: cache-virtualenv
      with:
        requirement_files: 'pyproject.toml'
        # The virtualenv cache is invalidated when:
        # - manually triggered by means of a custom cache version token
        # - on a weekly basis
        # - any of the integration requirements change (a hash of the
        # __init__.py files is included in the cache key)
        custom_cache_key_element: ${{ inputs.cache_version }}-${{steps.date.outputs.week}}-${{inputs.install_integrations}}-${{ hashFiles('src/zenml/integrations/*/__init__.py') }}

    # Disabled for now because it doesn't work well with multiple parallel jobs
    # - uses: syphar/restore-pip-download-cache@v1
    #   with:
    #     requirement_files: 'pyproject.toml'
    #     # The pip download cache can be updated on a weekly basis as new packages
    #     # don't appear that often
    #     custom_cache_key_element: ${{ inputs.cache_version }}-${{ inputs.python-version }}-${{steps.date.outputs.week}}

    - name: Install ZenML
      if: steps.cache-virtualenv.outputs.cache-hit != 'true'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install -e .[server,templates,secrets-aws,secrets-gcp,secrets-azure,secrets-hashicorp,s3fs,gcsfs,adlfs,dev]

    - name: Install basic ZenML integrations
      if: steps.cache-virtualenv.outputs.cache-hit != 'true' && inputs.install_integrations == 'yes'
      shell: bash
      run: |
        zenml integration export-requirements --output-file integration-requirements.txt --ignore-integration feast --ignore-integration label_studio --ignore-integration bentoml --ignore-integration seldon --ignore-integration kserve --ignore-integration langchain --ignore-integration llama_index --ignore-integration pycaret
        pip install -r integration-requirements.txt
        rm integration-requirements.txt

    - name: Install langchain and llama_index integrations
      if: steps.cache-virtualenv.outputs.cache-hit != 'true' && inputs.install_integrations == 'yes'
      shell: bash
      run: |
        zenml integration install -y langchain llama_index

      # Refresh the ZenML installation if using a cached virtualenv or after
      # installing integrations
    - name: Refresh ZenML installation
      if: steps.cache-virtualenv.outputs.cache-hit == 'true' || inputs.install_integrations == 'yes'
      shell: bash
      run: |
        pip install -e .[server,templates,secrets-aws,secrets-gcp,secrets-azure,secrets-hashicorp,s3fs,gcsfs,adlfs,dev]

    - name: Check Python environment
      shell: bash
      run: |
        zenml integration list
        pip list
        pip check || true
